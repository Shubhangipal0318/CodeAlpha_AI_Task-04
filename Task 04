import cv2
import torch
from torchvision.ops import box_iou
from models.experimental import attempt_load
from utils.general import non_max_suppression, scale_coords
from utils.datasets import letterbox
import numpy as np

# Load YOLOv5 model
model = attempt_load('yolov5s.pt')  # or yolov5m.pt, yolov5l.pt, yolov5x.pt
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device).eval()

# Initialize video capture
cap = cv2.VideoCapture(0)  # Use 0 for webcam or provide video file path

# Initialize tracker
class_names = model.module.names if hasattr(model, 'module') else model.names
colors = np.random.randint(0, 255, size=(len(class_names), 3), dtype=np.uint8)
tracked_objects = {}

def detect_objects(frame):
    img = letterbox(frame, new_shape=640)[0]
    img = img[:, :, ::-1].transpose(2, 0, 1)  # BGR to RGB, to 3x416x416
    img = np.ascontiguousarray(img)
    img = torch.from_numpy(img).to(device)
    img = img.float()
    img /= 255.0  # 0 - 255 to 0.0 - 1.0
    if img.ndimension() == 3:
        img = img.unsqueeze(0)

    pred = model(img)[0]
    pred = non_max_suppression(pred, 0.4, 0.5)

    detections = []
    for det in pred[0]:
        if det is not None and len(det):
            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], frame.shape).round()
            for *xyxy, conf, cls in det:
                x1, y1, x2, y2 = map(int, xyxy)
                class_id = int(cls)
                detections.append((x1, y1, x2, y2, class_id, float(conf)))
    return detections

def update_tracks(detections):
    global tracked_objects

    # Update existing tracks
    for obj_id in list(tracked_objects.keys()):
        tracked_objects[obj_id]['ttl'] -= 1
        if tracked_objects[obj_id]['ttl'] <= 0:
            del tracked_objects[obj_id]

    # Match detections to existing tracks
    for det in detections:
        x1, y1, x2, y2, class_id, conf = det
        det_bbox = torch.tensor([[x1, y1, x2, y2]])
        
        max_iou = 0
        max_id = None
        for obj_id, obj in tracked_objects.items():
            if obj['class_id'] == class_id:
                track_bbox = torch.tensor([[obj['x1'], obj['y1'], obj['x2'], obj['y2']]])
                iou = box_iou(det_bbox, track_bbox).item()
                if iou > max_iou:
                    max_iou = iou
                    max_id = obj_id

        if max_iou > 0.3:  # IOU threshold
            tracked_objects[max_id] = {
                'x1': x1, 'y1': y1, 'x2': x2, 'y2': y2,
                'class_id': class_id, 'ttl': 10  # Time to live
            }
        else:
            # Create new track
            new_id = max(tracked_objects.keys(), default=0) + 1
            tracked_objects[new_id] = {
                'x1': x1, 'y1': y1, 'x2': x2, 'y2': y2,
                'class_id': class_id, 'ttl': 10
            }

while True:
    ret, frame = cap.read()
    if not ret:
        break

    detections = detect_objects(frame)
    update_tracks(detections)

    for obj_id, obj in tracked_objects.items():
        x1, y1, x2, y2 = obj['x1'], obj['y1'], obj['x2'], obj['y2']
        class_id = obj['class_id']
        label = f"{class_names[class_id]} {obj_id}"
        color = colors[class_id]
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

    cv2.imshow('Object Detection and Tracking', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()